Execute code for comparison

##########################CPAT############################

make_logitModel.py -x ../../train/human_hexamer.tsv -c ../../train/human_pc_train.fa -n ../../train/human_lnc_train.fa -o Human
make_logitModel.py -x ../../train/mouse_hexamer.tsv -c ../../train/mouse_pc_train.fa -n ../../train/mouse_lnc_train.fa -o Mouse
make_logitModel.py -x ../../train/cow_hexamer.tsv -c ../../train/cow_pc_train.fa -n ../../train/cow_lnc_train.fa -o cow
make_logitModel.py -x ../ath_hexamer.tsv -c ../train/ath_pc_train.fa -n ../train/ath_lnc_train.fa -o ath
make_logitModel.py -x ../train/osa_hexamer.tsv -c ../train/osa_pc_train.fa -n ../train/osa_lnc_train.fa -o Osa
make_logitModel.py -x ../train/zma_hexamer.tsv -c ../train/zma_pc_train.fa -n ../train/zma_lnc_train.fa -o Zma

cpat.py -g ../human_test.fa -d Human.logit.RData -x ../../train/human_hexamer.tsv -o human_cpat_v2.txt
cpat.py -g ../mouse_test.fa -d Mouse.logit.RData -x ../../train/mouse_hexamer.tsv -o mouse_cpat.txt
cpat.py -g ../cow_test.fa -d cow.logit.RData -x ../../train/cow_hexamer.tsv -o cow_cpat.txt
cpat.py -g ath_test.fa -d ath.logit.RData -x ../train/ath_hexamer.tsv -o ath_cpat.txt
cpat.py -g osa_test.fa -d Osa.logit.RData -x ../train/osa_hexamer.tsv -o osa_cpat.txt
cpat.py -g zma_test.fa -d Zma.logit.RData -x ../train/zma_hexamer.tsv -o Zma_cpat.txt



##########################CPC2############################
/root/CPC2-beta/bin/CPC2.py -i ../test/human_test.fa -o human_cpc.txt
/root/CPC2-beta/bin/CPC2.py -i ../test/mouse_test.fa -o mouse_cpc.txt
/root/CPC2-beta/bin/CPC2.py -i ../test/cow_test.fa -o cow_cpc.txt
/root/CPC2-beta/bin/CPC2.py -i ../test/ath_test.fa -o ath_cpc.txt
/root/CPC2-beta/bin/CPC2.py -i ../test/osa_test.fa -o osa_cpc.txt
/root/CPC2-beta/bin/CPC2.py -i ../test/zma_test.fa -o zma_cpc.txt



##########################PLEK############################
nohup python /root/othertool/PLEK.1.2/PLEKModelling.py -mRNA ../../train/human_pc_train.fa -lncRNA ../../train/human_lnc_train.fa -prefix human -log2c 1,3,1 -log2g -1,-3,-1 -nfold 2 -k 4 > human.log 2>&1 &
python /root/othertool/PLEK.1.2/PLEK.py -fasta ../../test/human_test.fa -out human_plek.txt -thread 10 -range human.range -model human.model -k 4

nohup python /root/othertool/PLEK.1.2/PLEKModelling.py -mRNA ../../train/mouse_pc_train.fa -lncRNA ../../train/mouse_lnc_train.fa -prefix mouse -log2c 1,3,1 -log2g -1,-3,-1 -nfold 2 -k 4 > mouse.log 2>&1 &
python /root/othertool/PLEK.1.2/PLEK.py -fasta ../../test/mouse_test.fa -out mouse_plek.txt -thread 10 -range mouse.range -model mouse.model -k 4

python /root/othertool/PLEK.1.2/PLEKModelling.py -mRNA ../../train/cow_pc_train.fa -lncRNA ../../train/cow_lnc_train.fa -prefix cow -log2c 1,3,1 -log2g -1,-3,-1 -nfold 2 -k 4
python /root/othertool/PLEK.1.2/PLEK.py -fasta ../../test/cow_test.fa -out cow_plek.txt -thread 10 -range cow.range -model cow.model -k 4

nohup python /root/othertool/PLEK.1.2/PLEKModelling.py -mRNA ../train/ath_pc_train.fa -lncRNA ../train/ath_lnc_train.fa -prefix ath -log2c 1,3,1 -log2g -1,-3,-1 -nfold 2 -k 4 > ath.log 2>&1 &
python /root/othertool/PLEK.1.2/PLEK.py -fasta ../test/ath_test.fa -out ath_plek.txt -thread 10 -range ath.range -model ath.model -k 4

nohup python /root/othertool/PLEK.1.2/PLEKModelling.py -mRNA ../train/osa_pc_train.fa -lncRNA ../train/osa_lnc_train.fa -prefix osa -log2c 1,3,1 -log2g -1,-3,-1 -nfold 2 -k 4 > osa.log 2>&1 &
python /root/othertool/PLEK.1.2/PLEK.py -fasta ../test/osa_test.fa -out osa_plek.txt -thread 10 -range osa.range -model osa.model -k 4

nohup python /root/othertool/PLEK.1.2/PLEKModelling.py -mRNA ../train/zma_pc_train.fa -lncRNA ../train/zma_lnc_train.fa -prefix zma -log2c 1,3,1 -log2g -1,-3,-1 -nfold 2 -k 4 > zma.log 2>&1 &
python /root/othertool/PLEK.1.2/PLEK.py -fasta ../test/zma_test.fa -out zma_plek.txt -thread 10 -range zma.range -model zma.model -k 4



############################LncFinder############################
library("LncFinder")
library('seqinr')
human_pc <- read.fasta("../train/human_pc_train.fa")
human_lnc <- read.fasta("../train/human_lnc_train.fa")
my_file_1 <- make_frequencies(cds.seq = human_pc, lncRNA.seq = human_lnc,SS.features = FALSE, cds.format = "DNA", lnc.format = "DNA", check.cds = TRUE, ignore.illegal = FALSE)
human_model <- build_model(human_lnc, human_pc, my_file_1, SS.features = FALSE, lncRNA.format = "DNA", mRNA.format = "DNA", parallel.cores = 28, folds.num = 10, seed = 1, gamma.range = (2^seq(-5, 0, 1)),cost.range = c(1, 4))
human_fa <- read.fasta("../test/human_test.fa")
human_test <- lnc_finder(human_fa, SS.features = FALSE, format = "DNA",frequencies.file = my_file_1, svm.model = human_model, parallel.cores = 20)
write.table(human_test,"human_lncfinder_mydata.txt")
sed '1d' human_lncfinder_mydata.txt > human_lncfinder_mydata2.txt
awk '{print $2}' human_lncfinder_mydata2.txt > human_lncfinder_mydata3.txt

library("LncFinder")
library('seqinr')
mouse_pc <- read.fasta("../train/mouse_pc_train.fa")
mouse_lnc <- read.fasta("../train/mouse_lnc_train.fa")
my_file_1 <- make_frequencies(cds.seq = mouse_pc, lncRNA.seq = mouse_lnc,SS.features = FALSE, cds.format = "DNA", lnc.format = "DNA", check.cds = TRUE, ignore.illegal = FALSE)
mouse_model <- build_model(mouse_lnc, mouse_pc, my_file_1, SS.features = FALSE, lncRNA.format = "DNA", mRNA.format = "DNA", parallel.cores = 28, folds.num = 10, seed = 1, gamma.range = (2^seq(-5, 0, 1)),cost.range = c(1,4))
mouse_fa <- read.fasta("../test/mouse_test.fa")
mouse_test <- lnc_finder(mouse_fa, SS.features = FALSE, format = "DNA",frequencies.file = my_file_1, svm.model = mouse_model, parallel.cores = 20)
write.table(mouse_test,"mouse_lncfinder_mydata.txt")
sed '1d' mouse_lncfinder_mydata.txt > mouse_lncfinder_mydata2.txt
awk '{print $2}' mouse_lncfinder_mydata2.txt > mouse_lncfinder_mydata3.txt

library("LncFinder")
library('seqinr')
cow_pc <- read.fasta("../train/cow_pc_train.fa")
cow_lnc <- read.fasta("../train/cow_lnc_train.fa")
my_file_1 <- make_frequencies(cds.seq = cow_pc, lncRNA.seq = cow_lnc,SS.features = FALSE, cds.format = "DNA", lnc.format = "DNA", check.cds = TRUE, ignore.illegal = FALSE)
cow_model <- build_model(cow_lnc, cow_pc, my_file_1, SS.features = FALSE, lncRNA.format = "DNA", mRNA.format = "DNA", parallel.cores = 28, folds.num = 10, seed = 1, gamma.range = (2^seq(-5, 0, 1)),cost.range = c(1,4))
cow_fa <- read.fasta("../test/cow_test.fa")
cow_test <- lnc_finder(cow_fa, SS.features = FALSE, format = "DNA",frequencies.file = my_file_1, svm.model = cow_model, parallel.cores = 20)
write.table(cow_test,"cow_lncfinder_mydata.txt")
sed '1d' cow_lncfinder_mydata.txt > cow_lncfinder_mydata2.txt
awk '{print $2}' cow_lncfinder_mydata2.txt > cow_lncfinder_mydata3.txt

library("LncFinder")
library('seqinr')
ath_pc <- read.fasta("../train/ath_pc_train.fa")
ath_lnc <- read.fasta("../train/ath_lnc_train.fa")
my_file_1 <- make_frequencies(cds.seq = ath_pc, lncRNA.seq = ath_lnc,SS.features = FALSE, cds.format = "DNA", lnc.format = "DNA", check.cds = TRUE, ignore.illegal = FALSE)
ath_model <- build_model(ath_lnc, ath_pc, my_file_1, SS.features = FALSE, lncRNA.format = "DNA", mRNA.format = "DNA", parallel.cores = 28, folds.num = 10, seed = 1, gamma.range = (2^seq(-5, 0, 1)),cost.range = c(1,4))
athv5 <- read.fasta("../test/ath_test.fa")
result <- lnc_finder(athv5, SS.features=FALSE, format = "DNA",frequencies.file=my_file_1, svm.model = ath_model, parallel.cores = 20)
write.table(result,"athv5_lncfinder.txt")

library("LncFinder")
library('seqinr')
osa_pc <- read.fasta("../train/osa_pc_train.fa")
osa_lnc <- read.fasta("../train/osa_lnc_train.fa")
my_file_1 <- make_frequencies(cds.seq = osa_pc, lncRNA.seq = osa_lnc,SS.features = FALSE, cds.format = "DNA", lnc.format = "DNA", check.cds = TRUE, ignore.illegal = FALSE)
osa_model <- build_model(osa_lnc, osa_pc, my_file_1, SS.features = FALSE, lncRNA.format = "DNA", mRNA.format = "DNA", parallel.cores = 28, folds.num = 10, seed = 1, gamma.range = (2^seq(-5, 0, 1)),cost.range = c(1,4))
osav5 <- read.fasta("../test/osa_test.fa")
result <- lnc_finder(osav5, SS.features=FALSE, format = "DNA",frequencies.file=my_file_1, svm.model = osa_model, parallel.cores = 20)
write.table(result,"osav5_lncfinder.txt")

library("LncFinder")
library('seqinr')
zma_pc <- read.fasta("../train/zma_pc_train.fa")
zma_lnc <- read.fasta("../train/zma_lnc_train.fa")
my_file_1 <- make_frequencies(cds.seq = zma_pc, lncRNA.seq = zma_lnc,SS.features = FALSE, cds.format = "DNA", lnc.format = "DNA", check.cds = TRUE, ignore.illegal = FALSE)
zma_model <- build_model(zma_lnc, zma_pc, my_file_1, SS.features = FALSE, lncRNA.format = "DNA", mRNA.format = "DNA", parallel.cores = 28, folds.num = 10, seed = 1, gamma.range = (2^seq(-5, 0, 1)),cost.range = c(1,4))
zmav5 <- read.fasta("../test/zma_test.fa")
result <- lnc_finder(zmav5, SS.features=FALSE, format = "DNA",frequencies.file=my_file_1, svm.model = zma_model, parallel.cores = 20)
write.table(result,"zmav5_lncfinder.txt")

library("LncFinder")
library('seqinr')
humanv5 <- read.fasta("../test/NONCODEv5_human.fa")
result <- lnc_finder(humanv5, SS.features=FALSE, format = "DNA",frequencies.file="human", svm.model = "human", parallel.cores = 20)
write.table(result,"humanv5_lncfinder1.txt")
humanv52 <- read.fasta("../test/NONCODEv5_human.fa.split/NONCODEv5_human.part_002.fa")
result2 <- lnc_finder(humanv52, SS.features=FALSE, format = "DNA",frequencies.file="human", svm.model = "human", parallel.cores = 20)
write.table(result2,"humanv5_lncfinder2.txt")
humanv53 <- read.fasta("../test/NONCODEv5_human.fa.split/NONCODEv5_human.part_003.fa")
result3 <- lnc_finder(humanv53, SS.features=FALSE, format = "DNA",frequencies.file="human", svm.model = "human", parallel.cores = 20)
write.table(result3,"humanv5_lncfinder3.txt")

library("LncFinder")
library('seqinr')
mousev5 <- read.fasta("../test/NONCODEv5_mouse.fa")
result <- lnc_finder(mousev5, SS.features=FALSE, format = "DNA",frequencies.file="human", svm.model = "human", parallel.cores = 20)
write.table(result,"mousev5_lncfinder.txt")

library("LncFinder")
library('seqinr')
humanv5 <- read.fasta("../test/NONCODEv5_human.fa")
result <- lnc_finder(humanv5, SS.features=FALSE, format = "DNA",frequencies.file="human", svm.model = "human", parallel.cores = 20)
write.table(result,"humanv5_lncfinder.txt")

library("LncFinder")
library('seqinr')
humanv5 <- read.fasta("./cpc-human.fa")
result <- lnc_finder(humanv5, SS.features=FALSE, format = "DNA",frequencies.file="human", svm.model = "human", parallel.cores = 1)
write.table(result,"cpc_human_lncfinder.txt")

library("LncFinder")
library('seqinr')
humanv5 <- read.fasta("./cpc-mouse.fa")
result <- lnc_finder(humanv5, SS.features=FALSE, format = "DNA",frequencies.file="mouse", svm.model = "mouse", parallel.cores = 1)
write.table(result,"cpc_mouse_lncfinder.txt")

library("LncFinder")
library('seqinr')
ath_pc <- read.fasta("../train/ath_pc_train.fa")
ath_lnc <- read.fasta("../train/ath_lnc_train.fa")
my_file_1 <- make_frequencies(cds.seq = ath_pc, lncRNA.seq = ath_lnc,SS.features = FALSE, cds.format = "DNA", lnc.format = "DNA", check.cds = TRUE, ignore.illegal = FALSE)
ath_model <- build_model(ath_lnc, ath_pc, my_file_1, SS.features = FALSE, lncRNA.format = "DNA", mRNA.format = "DNA", parallel.cores = 28, folds.num = 10, seed = 1, gamma.range = (2^seq(-5, 0, 1)),cost.range = c(1,4))
cpc_ath <- read.fasta("cpc-ath.fa")
result <- lnc_finder(cpc_ath, SS.features=FALSE, format = "DNA",frequencies.file=my_file_1, svm.model = ath_model, parallel.cores = 1)
write.table(result,"cpc_ath_lncfinder.txt")



############################RNAplonc############################
txCdsPredict ../test/ath_test.fa ath_test.cds
perl ../RNAplonc-master/RNAplonc/feature_extraction.pl ../test/ath_test.fa ath_test.cds >ath_test.arff
java -cp ../RNAplonc-master/RNAplonc/weka.jar weka.classifiers.trees.REPTree -l ../RNAplonc-master/RNAplonc/RNAplonc.model -T ath_test.arff -p 0 >ath_test.txt

txCdsPredict ../test/osa_test.fa osa_test.cds
perl ../RNAplonc-master/RNAplonc/feature_extraction.pl ../test/osa_test.fa osa_test.cds >osa_test.arff
java -cp ../RNAplonc-master/RNAplonc/weka.jar weka.classifiers.trees.REPTree -l ../RNAplonc-master/RNAplonc/RNAplonc.model -T osa_test.arff -p 0 >osa_test.txt


txCdsPredict ../test/zma_test.fa zma_test.cds
perl ../RNAplonc-master/RNAplonc/feature_extraction.pl ../test/zma_test.fa zma_test.cds >zma_test.arff
java -cp ../RNAplonc-master/RNAplonc/weka.jar weka.classifiers.trees.REPTree -l ../RNAplonc-master/RNAplonc/RNAplonc.model -T zma_test.arff -p 0 >zma_test.txt



############################PLncPRO############################
makeblastdb -in /root/new_review/alldata/train/ath_pc_train.fa -title sprotdb -dbtype prot -out sprotdb -parse_seqids
makeblastdb -in /root/new_review/alldata/train/osa_pc_train.fa -title osa -dbtype prot -out osa -parse_seqids
makeblastdb -in /root/new_review/alldata/train/zma_pc_train.fa -title zma -dbtype prot -out zma -parse_seqids
python prediction.py -i /root/new_review/alldata/test/ath_test.fa -p ath_plnc.txt -o ath_plnc -m models/dicot.model -d lib/blastdb/sprotdb/sprotdb -t 1
python prediction.py -i /root/new_review/alldata/test/osa_lnc_test.fa -p osa_lnc_plnc.txt -o osa_plnc -m models/monocot.model -d lib/blastdb/osa/osa -t 1
python prediction.py -i /root/new_review/alldata/test/zma_test.fa -p zma_plnc.txt -o zma_plnc -m models/monocot.model -d lib/blastdb/zma/zma -t 1


#################Prediction on other known datasets################
cpat.py -g NONCODEv5_human.fa -d Human.logit.RData -x /root/new_review/train/human_hexamer.tsv -o humanv5_cpat.txt
cpat.py -g NONCODEv5_mouse.fa -d Mouse.logit.RData -x /root/new_review/train/mouse_hexamer.tsv -o mousev5_cpat.txt
cpat.py -g NONCODEv5_cow.fa -d /root/CPAT-2.0.0/dat/cow.logit.RData -x /root/new_review/train/cow_hexamer.tsv -o cowv5_cpat.txt


python /root/othertool/PLEK.1.2/PLEK.py -fasta NONCODEv5_human.fa -out humanv5_plek.txt -thread 10 -range /root/new_review/alldata/plek/human.range -model /root/new_review/alldata/plek/human.model -k 4
python /root/othertool/PLEK.1.2/PLEK.py -fasta NONCODEv5_mouse.fa -out mousev5_plek.txt -thread 10 -range /root/new_review/alldata/plek/mouse.range -model /root/new_review/alldata/plek/mouse.model -k 4
python /root/othertool/PLEK.1.2/PLEK.py -fasta NONCODEv5_cow.fa -out cowv5_plek.txt -thread 10 -range /root/new_review/alldata/plek/cow.range -model /root/new_review/alldata/plek/cow.model -k 4


cpat.py -g ath.fa -d /root/new_review/alldata/compare/ath.logit.RData -x /root/new_review/alldata/ath_hexamer.tsv -o ath_ca_cpat.txt
cpat.py -g osa.fa -d /root/new_review/alldata/compare/osa.logit.RData -x /root/new_review/alldata/osa_hexamer.tsv -o osa_ca_cpat.txt
cpat.py -g zma.fa -d /root/new_review/alldata/compare/zma.logit.RData -x /root/new_review/alldata/zma_hexamer.tsv -o zma_ca_cpat.txt


python /root/othertool/PLEK.1.2/PLEK.py -fasta ath.fa -out ath_ca_plek.txt -thread 10 -range /root/new_review/alldata/plek/ath.range -model /root/new_review/alldata/plek/ath.model -k 4
python /root/othertool/PLEK.1.2/PLEK.py -fasta osa.fa -out osa_ca_plek.txt -thread 10 -range /root/new_review/alldata/plek/osa.range -model /root/new_review/alldata/plek/osa.model -k 4
python /root/othertool/PLEK.1.2/PLEK.py -fasta zma.fa -out zma_ca_plek.txt -thread 10 -range /root/new_review/alldata/plek/zma.range -model /root/new_review/alldata/plek/zma.model -k 4

